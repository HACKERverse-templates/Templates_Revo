name: Execute SSM Command

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      instance-id:
        description: 'Instance ID'
        required: true
        default: ''
      ttp:
        description: 'TTP ID to execute'
        required: true
        default: 'T1558.003'
      account-id:
        description: 'AWS Account ID to check'
        required: true
        default: '730335268696'

jobs:
  execute:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  

    - name: Check and Assume Role if Necessary
      run: |
        TARGET_ACCOUNT_ID=${{ github.event.inputs.account-id }}
        HARD_CODED_ACCOUNT_ID="730335268696"

        if [ "$TARGET_ACCOUNT_ID" != "$HARD_CODED_ACCOUNT_ID" ]; then
          echo "Account IDs do not match. Assuming role in account $TARGET_ACCOUNT_ID..."
          
          # Construct the ARN dynamically using the provided account ID
          ROLE_ARN="arn:aws:iam::$TARGET_ACCOUNT_ID:role/OrganizationAccountAccessRole"

          ROLE_CREDENTIALS=$(aws sts assume-role \
            --role-arn "$ROLE_ARN" \
            --role-session-name GitHubActionSession \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)

          AWS_ACCESS_KEY_ID=$(echo $ROLE_CREDENTIALS | awk '{print $1}')
          AWS_SECRET_ACCESS_KEY=$(echo $ROLE_CREDENTIALS | awk '{print $2}')
          AWS_SESSION_TOKEN=$(echo $ROLE_CREDENTIALS | awk '{print $3}')

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV
        else
          echo "Account IDs match. No role assumption needed."
        fi

    - name: Execute SSM Command
      run: |
        TTP=${{ github.event.inputs.ttp }}
        INSTANCE_ID=${{ github.event.inputs.instance-id }}
        aws ssm send-command \
          --document-name "AWS-RunPowerShellScript" \
          --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
          --parameters '{"commands":["Import-Module \"C:\\AtomicRedTeam\\invoke-atomicredteam\\Invoke-AtomicRedTeam.psd1\"; Invoke-AtomicTest '${TTP}'; Invoke-AtomicTest '${TTP}' -Cleanup"]}'
